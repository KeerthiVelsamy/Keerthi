#include<iostream>

using namespace std;

struct avl_node
{
    int data;
    struct avl_node *left;
    struct avl_node *right;
}*root;

class avlTree
{
    public:
        int height(avl_node *temp)
        {
            int h = 0;
            if (temp != NULL)
            {
                int l_height = height (temp->left);
                int r_height = height (temp->right);
                int max_height = max (l_height, r_height);
                h = max_height + 1;
            }
            return h;
        }

        int diff(avl_node *temp)
        {
             int l_height = height (temp->left);
             int r_height = height (temp->right);
             int b_factor= l_height - r_height;
             return b_factor;
        }

        avl_node *rr_rotation(avl_node *parent)
        {
             avl_node *temp;
             temp = parent->right;
             parent->right = temp->left;
             temp->left = parent;
             return temp;
        }
        avl_node *ll_rotation(avl_node *parent)
        {
            avl_node *temp;
            temp = parent->left;
            parent->left = temp->right;
            temp->right = parent;
            return temp;
        }
        avl_node *lr_rotation(avl_node *parent)
        {
            avl_node *temp;
            temp = parent->left;
            parent->left = rr_rotation (temp);
            return ll_rotation (parent);
        }
        avl_node *rl_rotation(avl_node *parent)
        {
            avl_node *temp;
            temp = parent->right;
            parent->right = ll_rotation (temp);
            return rr_rotation (parent);
        }
        avl_node *balance(avl_node *temp)
        {
            int bal_factor = diff (temp);
            if (bal_factor > 1)
            {
                if (diff (temp->left) > 0)
                {
                    temp = ll_rotation (temp);
                }
                else
                {
                    temp = lr_rotation (temp);
                }
            }
            else if (bal_factor < -1)
            {
                if (diff (temp->right) > 0)
                {
                    temp = rl_rotation (temp);
                }
                else
                {
                    temp = rr_rotation (temp);
                }
            }
            return temp;
        }
        avl_node *insert(avl_node *root, int val)
        {
                if (root == NULL)
                {
                    root = new avl_node;
                    root->data = val;
                    root->left = NULL;
                    root->right = NULL;
                    return root;
                }
                else if (val < root->data)
                {
                    root->left = insert(root->left, val);
                    root = balance (root);
                }
                else if (val >= root->data)
                {
                    root->right = insert(root->right, val);
                    root = balance (root);
                }
                return root;
        }
        avl_node *delete_node(avl_node *root, int val)
        {
            if(val < root->data)
            {
                root->left = delete_node(root->left, val);
                //root= balance(root);
            }
            else if(val > root->data)
            {
                root->right = delete_node(root->right, val);
                //root= balance(root);
            }
            else
            {
                if((root->left==NULL)&&(root->right==NULL))
                {
                    root=NULL;
                }
                else if(root->left==NULL)
                {
                    avl_node *temp = root->right;
                    root->data=temp->data;
                    root->right=NULL;
                    //root= balance(root);
                }
                else if(root->right==NULL)
                {
                    avl_node *temp = root->left;
                    root->data=temp->data;
                    root->left=NULL;
                    //root= balance(root);
                }
                else
                {
                    avl_node *temp;
                    temp=root->left;
                    root=root->right;
                    while(root->left==NULL)
                    {
                        root=root->left;
                    }
                    root->left=temp;
                    //root=balance(root);
                }
            }
            return root;
            root= balance(root);
        }

        void display(avl_node *ptr, int level)
        {
            if (ptr!=NULL)
            {
                display(ptr->right, level + 1);
                cout<<"\n";
                if (ptr == root)
                    cout<<"Root -> ";
                    for (int i = 0; i < level && ptr != root; i++)
                        cout<<"       ";
                        cout<<ptr->data;
                        display(ptr->left, level + 1);
            }
        }

        void inorder(avl_node *node)
        {
            if (node == NULL)
            {
                return;
            }
            else
            {
                inorder (node->left);
                cout<<node->data<<"  ";
                inorder (node->right);
            }
        }

        void preorder(avl_node *node)
        {
            if (node == NULL)
            {
                return;
            }
            else
            {
                cout<<node->data<<"  ";
                preorder (node->left);
                preorder (node->right);
            }
        }

        void postorder(avl_node *node)
        {
            if (node == NULL)
            {
                return;
            }
            else
            {
                postorder (node ->left);
                postorder (node ->right);
                cout<<node->data<<"  ";
            }
        }

        avlTree()
        {
            root = NULL;
        }
};


int main()
{
    int choice, item;
    avlTree avl;
    do
    {
        cout<<endl;
        cout<<"--------------------------------"<<endl;
        cout<<"    AVL Tree Implementation     "<<endl<<endl;
        cout<<"--------------------------------"<<endl;
        cout<<"1.Insert Element into the tree  "<<endl;
        cout<<"2.Display Balanced AVL Tree     "<<endl;
        cout<<"3.InOrder traversal             "<<endl;
        cout<<"4.PreOrder traversal            "<<endl;
        cout<<"5.PostOrder traversal           "<<endl;
        cout<<"6.Delete a node                 "<<endl;
        cout<<"7.Exit                          "<<endl;
        cout<<"--------------------------------"<<endl;
        cout<<"Enter your Choice: ";
        cin>>choice;
        switch(choice)
        {
            case 1:
            {
                cout<<"Enter the value to be inserted: ";
                cin>>item;
                root = avl.insert(root, item);
            }
            break;
            case 2:
            {
                if (root == NULL)
                {
                    cout<<"Tree is Empty"<<endl;
                    continue;
                }
                cout<<"Your Balanced AVL Tree:"<<endl;
                avl.display(root, 1);
                //avl.balance(root);
                //avl.display(root, 1);
            }
            break;
            case 3:
            {
                cout<<"Inorder Traversal:  ";
                avl.inorder(root);
                cout<<endl<<endl;
            }
            break;
            case 4:
            {
                cout<<"Preorder Traversal:  ";
                avl.preorder(root);
                cout<<endl<<endl;
            }
            break;
            case 5:
            {
                cout<<"Postorder Traversal:  ";
                avl.postorder(root);
                cout<<endl<<endl;
            }
            break;
            case 6:
            {
                int val;
                cout<<" enter the element to delete "<<endl;
                cin>>val;
                avl.delete_node(root, val);
                //avl.balance(root);
            }
            break;
        }
    }while(choice<=6);
}
